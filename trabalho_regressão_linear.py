# -*- coding: utf-8 -*-
"""Trabalho Regressão Linear

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/126pLEz96K9-uJB1vIVe9drCFw17TwEZO

# IA
Análise Exploratória

# Importação das bibliotecas básicas
"""

!pip install plotly

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""# Base de dados 

- Fonte: https://www.brentozar.com/archive/2020/01/the-2020-data-professional-salary-survey-results-are-in/

## Exploração e Análise dados
"""

from google.colab import drive
drive.mount('/content/drive')

base_brentozar = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/2020_Data_Professional_Salary_Survey_Responses.xlsx', header = 3)

#base_brentozar.columns = range(base_brentozar.shape[1]) #apagando o header
base_brentozar

"""
base_brentozar = base_brentozar.drop('PostalCode', axis = 1)
base_brentozar = base_brentozar.drop('NewestVersionInProduction', axis = 1)
base_brentozar = base_brentozar.drop('OldestVersionInProduction', axis = 1)
base_brentozar = base_brentozar.drop('KindsOfTasksPerformed', axis = 1)
base_brentozar = base_brentozar.drop('OtherJobDuties', axis = 1)
base_brentozar = base_brentozar.drop('OtherDatabases', axis = 1) 
base_brentozar = base_brentozar.drop('EmploymentStatus', axis = 1) 
base_brentozar = base_brentozar.drop('CompanyEmployeesOverall', axis = 1)
base_brentozar = base_brentozar.drop('EducationIsComputerRelated', axis = 1)
base_brentozar = base_brentozar.drop('Certifications', axis = 1)
base_brentozar = base_brentozar.drop('LookingForAnotherJob', axis = 1)
base_brentozar = base_brentozar.drop('PopulationOfLargestCityWithin20Miles', axis = 1)
base_brentozar = base_brentozar.drop('HoursWorkedPerWeek', axis = 1)
base_brentozar = base_brentozar.drop('OtherPeopleOnYourTeam', axis = 1)
base_brentozar = base_brentozar.drop('Education', axis = 1)
base_brentozar = base_brentozar.drop('Country', axis = 1)
base_brentozar = base_brentozar.drop('PrimaryDatabase', axis = 1)
base_brentozar = base_brentozar.drop('JobTitle', axis = 1)
base_brentozar = base_brentozar.drop('ManageStaff', axis = 1)
base_brentozar = base_brentozar.drop('Counter', axis = 1)
base_brentozar = base_brentozar.drop('Timestamp', axis = 1)
base_brentozar = base_brentozar.drop('HowManyCompanies', axis = 1)
base_brentozar = base_brentozar.drop('EmploymentSector', axis = 1)
base_brentozar = base_brentozar.drop('CareerPlansThisYear', axis = 1)
base_brentozar = base_brentozar.drop('Gender', axis = 1)
base_brentozar = base_brentozar.drop('TelecommuteDaysPerWeek', axis = 1)

"""
base_brentozar.drop(['LookingForAnotherJob', 'PostalCode', 'Certifications', 'EducationIsComputerRelated', 'NewestVersionInProduction', 'CompanyEmployeesOverall', 'EmploymentStatus', 'OtherDatabases', 'OtherJobDuties', 'KindsOfTasksPerformed', 'OldestVersionInProduction' ,'PopulationOfLargestCityWithin20Miles', 'HoursWorkedPerWeek', 'OtherPeopleOnYourTeam', 'Education', 'Country', 'TelecommuteDaysPerWeek', 'Gender', 'CareerPlansThisYear', 'EmploymentSector' ,'HowManyCompanies' ,'Timestamp' ,'ManageStaff' , 'JobTitle' ,'PrimaryDatabase'], inplace=True, axis=1)

base_brentozar = base_brentozar[base_brentozar != 'Not Asked']
base_brentozar=base_brentozar.dropna(axis=0)
base_brentozar.reset_index(inplace=True, drop=True)
base_brentozar

base_brentozar.isnull().sum()

base_brentozar.info()

"""##Visualização dos Dados"""

np.unique(base_brentozar['SalaryUSD'], return_counts=True)

grafico = px.parallel_categories(base_brentozar, dimensions=['SalaryUSD','YearsWithThisTypeOfJob'])
grafico.show()

grafico = px.parallel_categories(base_brentozar, dimensions=['YearsWithThisDatabase','YearsWithThisTypeOfJob'])
grafico.show()

grafico = px.parallel_categories(base_brentozar, dimensions=['SalaryUSD','YearsWithThisDatabase'])
grafico.show()

"""##Regressão e Apresentação dos dados

"""

base_brentozar.columns

figura = plt.figure(figsize=(20,20))
sns.heatmap(base_brentozar.corr(), annot=True);

X_base = base_brentozar.iloc[:, [0,1,2]].values
X_base

y_base = base_brentozar.iloc[:, [0,1,2]].values
y_base

df = px.data.tips()
fig = px.scatter(
    base_brentozar, x='YearsWithThisTypeOfJob', y='SalaryUSD', opacity=0.65,
    trendline='ols', trendline_color_override='red'
)
fig.show()

X_base = base_brentozar.iloc[:, 0].values
X_base

y_base = base_brentozar.iloc[:, 1].values
y_base

np.corrcoef(X_base, y_base)

X_base.shape

X_base = X_base.reshape(-1,1)
X_base.shape

regressor_multiplo = LinearRegression()
regressor_multiplo.fit(X_base, y_base)

regressor_multiplo.intercept_

regressor_multiplo.coef_

previsoes = regressor_multiplo.predict(X_base)
previsoes

X_base.ravel()

grafico = px.scatter(x = X_base.ravel(), y = y_base)
grafico.add_scatter(x = X_base.ravel(), y = previsoes, name = 'Regressão')
grafico.show()

regressor_multiplo.intercept_ + regressor_multiplo.coef_ * 52

regressor_multiplo.predict([[52]])

regressor_multiplo.score(X_base, y_base)

from yellowbrick.regressor import ResidualsPlot
visualizador = ResidualsPlot(regressor_multiplo)
visualizador.fit(X_base, y_base)
visualizador.poof()

from sklearn.model_selection import train_test_split
X_base_treinamento, X_base_teste, y_base_treinamento, y_base_teste = train_test_split(X_base, y_base, test_size = 0.3, random_state = 0)

predictions = regressor_multiplo.predict(X_base_teste)
predictions

print('MAE:', metrics.mean_absolute_error(y_base_teste, predictions))
print('MSE:', metrics.mean_squared_error(y_base_teste, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_base_teste, predictions)))