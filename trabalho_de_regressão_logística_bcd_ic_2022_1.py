# -*- coding: utf-8 -*-
"""Trabalho de Regressão Logística - BCD - IC - 2022-1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GOZxlFgAW1og6MhDEfBQfg_gHV1f1Mi9

# Projeto de Regressão Logística

 O câncer de mama  é o tipo de câncer mais comum entre
mulheres e o segundo mais comum no mundo.

 O objetivo de desse trabalho é 
criar um modelo preditivo usando regressão Logistica que, dadas as características de exames de uma paciente, será capaz de classificar o tumor como Maligno ou Benigno, a partir do aprendizado obtido no treinamento do algoritmo

** Importe algumas bibliotecas que você acha que você precisará **

## Importar bibliotecas
"""

import pandas as pd
import numpy as np
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix, plot_confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer #transformar string em numeros

"""## Obter dados
** Leia o arquivo data.csv e grave-o em um DataFrame chamado bcw. **
"""

from google.colab import drive
drive.mount('/content/drive')

bcw_csv = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/data - data.csv', sep=",")
bcw_csv

"""** Verifique o cabeçalho do bcw **"""

bcw_csv.head()

bcw_csv.describe()

bcw_csv.isnull()

plt.figure(figsize=(10, 10))
sns.heatmap(bcw_csv.isnull(),yticklabels=False,cbar=False,cmap='viridis')

sns.set_style('whitegrid')
sns.countplot(x='diagnosis',data=bcw_csv,palette='RdBu_r')

plt.figure(figsize=(12, 7))
sns.boxplot(x='diagnosis',y='area_mean',data=bcw_csv,palette='winter')

bcw_csv = bcw_csv.drop('id', axis = 1)

bcw_csv.info()





labelencoder_diagnosis = LabelEncoder()
bcw_csv["diagnosis"] = labelencoder_diagnosis.fit_transform(bcw_csv["diagnosis"]) #passando o diagnostico para numeros

bcw_csv

X_train, X_test, y_train, y_test = train_test_split(bcw_csv.drop('diagnosis',axis=1), bcw_csv['diagnosis'], test_size=0.30, random_state=0)

logmodel = LogisticRegression()
logmodel.fit(X_train,y_train) #cria o modelo de treino baseado em X e Y de treino

predictions = logmodel.predict(X_test)

"""##Avaliação do modelo"""

print(classification_report(y_test,predictions))

cm = confusion_matrix(y_test, predictions)

cm

titles_options = [("Matriz de Confusão, sem normalização", None),
                  ("Normalizada", 'true')]
for title, normalize in titles_options:
    disp = plot_confusion_matrix(logmodel, X_test, y_test,
                                 
                                 cmap=plt.cm.Greens,
                                 normalize=normalize)
    disp.ax_.set_title(title)

    print(title)
    print(disp.confusion_matrix)

plt.show()

print(f'O modelo teve uma acertividade de: {logmodel.score(X_test, y_test)}')