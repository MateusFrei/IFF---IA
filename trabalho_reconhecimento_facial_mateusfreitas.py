# -*- coding: utf-8 -*-
"""Trabalho_Reconhecimento_facial_MateusFreitas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ntYAjaqe5ZCosMsO4zKTr1zEhFOAzWHn

# Trabalho de Reconhecimento Facial

### Importando a Biblioteca
"""

import cv2 # OpenCV
from PIL import Image
import numpy as np
from google.colab.patches import cv2_imshow

"""## Coletando os Dados"""

from google.colab import drive
drive.mount('/content/drive')

pathdrive = '/content/drive/MyDrive/Colab Notebooks/'

import zipfile
path = pathdrive+'Imagens_TrabalhoIA-.zip'
zip_object = zipfile.ZipFile(file=path, mode='r')
zip_object.extractall('./')
zip_object.close()

import os
os.listdir('/content/drive/MyDrive/Colab Notebooks/Imagens_TrabalhoIA')

base_data = '/content/Imagens_TrabalhoIA'

"""## Treinamento"""

def dados_imagem():
  caminhos = [os.path.join(base_data, f) for f in os.listdir(base_data)]

  ids = []
  faces = []
  students = [] 
  names = []
  index = 0              

  for caminho in caminhos:
   
    imagem = Image.open(caminho).convert('L')
    imagem_np = np.array(imagem, 'uint8')

    imagem_dividida = os.path.split(caminho)[1].split('.')
    name = imagem_dividida[0]
    face_type = imagem_dividida[1]

    studentExists = False

    for n in names:
      if (n == name):
        studentExists = True
        encontrar_estudante = next((item for item in students if item['name'] == name), None)

        ids.append(encontrar_estudante['id'])
        faces.append(imagem_np)

        break
    
    if (not studentExists):
      new_student_index = len(students)
      students.append( { 'id': new_student_index, 'name': name })

      ids.append(students[new_student_index]['id'])
      faces.append(imagem_np)

      names.append(name)

  return students, np.array(ids), faces

base_data, ids, faces = dados_imagem()

for _data in base_data:
  print(_data)

def find_student_by_name(name):
  found_student = next((item for item in base_data if item['name'] == name), None)
  return found_student

print(find_student_by_name('Mateus'))

lbph = cv2.face.LBPHFaceRecognizer_create()
lbph.train(faces, ids)
lbph.write('classificadorLBPH.yml')

"""##Classificação"""

reconhecedor = cv2.face.LBPHFaceRecognizer_create()
reconhecedor.read('/content/classificadorLBPH.yml')

imagem_teste = '/content/Imagens_TrabalhoIA/Mateus.serio.jpg'

imagem = Image.open(imagem_teste).convert('L')
imagem_np = np.array(imagem, 'uint8')
print(imagem_np)

idprevisto,_ = reconhecedor.predict(imagem_np)
idprevisto

aluno_correto = find_student_by_name('Mateus')

x = 10
y = 500
cv2.putText(imagem_np, 'P: ' + str(idprevisto), (x,y + 300), cv2.FONT_HERSHEY_COMPLEX, 3, (0,255,0))
cv2.putText(imagem_np, 'C: ' + str(aluno_correto['id']) + ' - ' + str(aluno_correto['name']), (x,y + 500), cv2.FONT_HERSHEY_COMPLEX, 3, (0,255,0))
cv2_imshow(imagem_np)